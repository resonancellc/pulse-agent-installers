#!/bin/bash
PREFIX="$1/Contents/Resources"
MACOS_VERSION=$(sw_vers |grep ProductVersion|awk '{print $2}')
INSTALL_PATH="/Library/Application Support/Pulse"
VNC_PASSWORD=$(uuidgen | sed 's/-//g')
BASE_URL="@@BASE_URL@@"
INVENTORY_TAG="@@INVENTORY_TAG@@"
FUSION_INVENTORY_AGENT_PKG="@@FUSION_INVENTORY_AGENT_PKG@@"
FUSION_INVENTORY_AGENT_ARCHIVE="@@FUSION_INVENTORY_AGENT_ARCHIVE@@"
MODULES_LIST_FILENAMES="@@PY_NETIFACES_FILENAME@@
                        @@PY_CONFIGPARSER_FILENAME@@
                        @@PY_UTILS_FILENAME@@
                        @@PY_SLEEKXMPP_FILENAME@@
                        @@PY_ZIPFILE_FILENAME@@
                        @@PY_CURL_FILENAME@@
                        @@PY_LXML_FILENAME@@
                        @@PY_CRYPTO_FILENAME@@
                        @@PY_CRON_FILENAME@@
                        @@PY_CRON_DEPS_1_FILENAME@@
                        @@PY_CRON_DEPS_2_FILENAME@@
                        @@PY_PSUTIL_FILENAME@@
                        @@PY_PLYVEL_FILENAME@@"
PY3_MODULES_LIST_FILENAMES="@@PY3_QT5_FILENAME@@"
PULSE_AGENT_FILENAME="@@PULSE_AGENT_FILENAME@@"
PULSE_AGENT_PLUGINS_FILENAME="@@PULSE_AGENT_PLUGINS_FILENAME@@"
PULSE_AGENT_CONFFILE_FILENAME="@@PULSE_AGENT_CONFFILE_FILENAME@@"
PULSE_SCHEDULER_CONFFILE_FILENAME="@@PULSE_SCHEDULER_CONFFILE_FILENAME@@"
FUSION_CFG=/opt/fusioninventory-agent/agent.cfg
SSH_PUB_KEY="${PREFIX}/id_rsa.pub"


### Command Line tools

echo
echo "###########################################"
echo "1. INSTALLING COMMAND LINE TOOLS AND PYTHON"
echo "###########################################"
echo

touch /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress
case ${MACOS_VERSION} in
	"10.13*" )
    softwareupdate -i "Command Line Tools (macOS High Sierra version 10.13) for Xcode-9.0"
		;;
  "10.12*" )
    softwareupdate -i "Command Line Tools (macOS Sierra version 10.12) for Xcode-9.0"
    ;;
  "10.11*" )
    softwareupdate -i "Command Line Tools (macOS El Capitan version 10.11) for Xcode-8.2"
    ;;
  "10.10*" )
    softwareupdate -i "Command Line Tools (macOS Yosemite version 10.10) for Xcode-7.2"
    ;;
esac

# Homebrew
su - $USER -c '/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" </dev/null'

# Install python 3
su - $USER -c '/usr/local/bin/brew install python3'

# Install pip
easy_install pip

# Install leveldb
su - $USER -c '/usr/local/bin/brew install leveldb'

### Pulse account

echo
echo "#########################"
echo "2. CREATING PULSE ACCOUNT"
echo "#########################"
echo

# Create pulse user account
if id pulse 2>/dev/null; then
  echo "WARN: pulse user already exists on the system"
else
  USER_PASSWORD=$(openssl rand -base64 24)
  sysadminctl -addUser pulse -shell /usr/local/bin/rbash -password ${USER_PASSWORD} -home /var/lib/pulse2 2>/dev/null
  if [[ ${?} -eq 0 ]]; then
    echo "INFO: pulse user account created"
  else
    echo "ERROR: Something went wrong while creating pulse user account"
  fi
  createhomedir -c -u pulse 2>&1
fi

# Create restricted shell
if [[ ! -f /bin/rbash ]]; then
  cp "${PREFIX}/rbash" /usr/local/bin/
  chmod +x /usr/local/bin/rbash
fi

# Hide the account
dscl . create /Users/pulse IsHidden 1
dscl . -delete "/SharePoints/Pulse's Public Folder"

# Allow remote login
systemsetup -setremotelogin on


### SSH Key

echo
echo "###########################################"
echo "3. ADDING SERVER SSH KEY TO AUTHORIZED KEYS"
echo "###########################################"
echo

# Add server's public key
if [[ -e ${SSH_PUB_KEY} ]]; then
  if [[ ! -d /var/lib/pulse2/.ssh/ ]]; then
    mkdir -p /var/lib/pulse2/.ssh/
  fi
  cat ${SSH_PUB_KEY} > /var/lib/pulse2/.ssh/authorized_keys
  chown -R pulse: /var/lib/pulse2
  chmod -R 700 /var/lib/pulse2
  chmod 600 /var/lib/pulse2/.ssh/authorized_keys
fi


### Fusion-Inventory agent

echo
echo "###################################"
echo "4. INSTALLING FUSIONINVENTORY AGENT"
echo "###################################"
echo

curl -O ${BASE_URL}/mac/downloads/${FUSION_INVENTORY_AGENT_ARCHIVE}
if [[ -f ${FUSION_INVENTORY_AGENT_ARCHIVE} ]];then
  tar xzf ${FUSION_INVENTORY_AGENT_ARCHIVE}
else
  echo "ERROR: downloaded package ${FUSION_INVENTORY_AGENT_ARCHIVE} not found"
  exit 1
fi

if [[ -d ${FUSION_INVENTORY_AGENT_PKG} ]]; then
  installer -pkg "${FUSION_INVENTORY_AGENT_PKG}" -target /
  echo "tag=${INVENTORY_TAG}" > ${FUSION_CFG}
else
  echo "ERROR: downloaded package ${FUSION_INVENTORY_AGENT_PKG} not found"
  exit 1
fi

if [ -e ${FUSION_INVENTORY_AGENT_PKG} ];then
  rm -rf ${FUSION_INVENTORY_AGENT_PKG}
fi

if [ -e ${FUSION_INVENTORY_AGENT_ARCHIVE} ];then
  rm -rf ${FUSION_INVENTORY_AGENT_ARCHIVE}
fi


### Python modules needed by Pulse

echo
echo "############################"
echo "5. INSTALLING PYTHON MODULES"
echo "############################"
echo

# Download and install the python modules
for MODULE_FILENAME in ${MODULES_LIST_FILENAMES}; do
  curl -O ${BASE_URL}/mac/downloads/python_modules/${MODULE_FILENAME}
  if [[ -f ${MODULE_FILENAME} ]]; then
    python -m pip install --upgrade --no-index --find-links="." ${MODULE_FILENAME}
  else
    echo "ERROR: downloaded package ${MODULE_FILENAME} not found"
    exit 1
  fi
  if [[ -e ${MODULE_FILENAME} ]];then
    rm -rf ${MODULE_FILENAME}
  fi
done
for MODULE_FILENAME in ${PY3_MODULES_LIST_FILENAMES}; do
  curl -O ${BASE_URL}/mac/downloads/python_modules/${MODULE_FILENAME}
  if [[ -f ${MODULE_FILENAME} ]]; then
    /usr/local/bin/python3 -m pip install --upgrade --no-index --find-links="." ${MODULE_FILENAME}
  else
    echo "ERROR: downloaded package ${MODULE_FILENAME} not found"
    exit 1
  fi
  if [[ -e ${MODULE_FILENAME} ]];then
    rm -rf ${MODULE_FILENAME}
  fi
done


### Pulse agent and plugins

echo
echo "#########################"
echo "6. INSTALLING PULSE AGENT"
echo "#########################"
echo

# Download and install agent
curl -O ${BASE_URL}/${PULSE_AGENT_FILENAME}
if [[ -f ${PULSE_AGENT_FILENAME} ]]; then
  python -m pip install --upgrade --no-index --find-links="." ${PULSE_AGENT_FILENAME}
else
  echo "ERROR: downloaded package ${PULSE_AGENT_FILENAME} not found"
  exit 1
fi
if [[ -e ${PULSE_AGENT_FILENAME} ]];then
  rm -rf ${PULSE_AGENT_FILENAME}
fi

# Download and install plugins
curl -O ${BASE_URL}/${PULSE_AGENT_PLUGINS_FILENAME}
if [[ -f ${PULSE_AGENT_PLUGINS_FILENAME} ]]; then
  python -m pip install --upgrade --no-index --find-links="." ${PULSE_AGENT_PLUGINS_FILENAME}
else
  echo "ERROR: downloaded package ${PULSE_AGENT_PLUGINS_FILENAME} not found"
  exit 1
fi
if [[ -e ${PULSE_AGENT_PLUGINS_FILENAME} ]];then
  rm -rf ${PULSE_AGENT_PLUGINS_FILENAME}
fi

# Create Pulse folder and base layout
if [[ ! -d "${INSTALL_PATH}/etc" ]]; then
  mkdir -p "${INSTALL_PATH}/etc"
fi
if [[ ! -d "${INSTALL_PATH}/var" ]]; then
  mkdir -p "${INSTALL_PATH}/var"
fi

# Copy config files
cp "${PREFIX}/${PULSE_AGENT_CONFFILE_FILENAME}" "${INSTALL_PATH}/etc/"
# Only copy scheduler config file if is does not already exist
if [[ ! -f ${INSTALL_PATH}/etc/${PULSE_SCHEDULER_CONFFILE_FILENAME} ]]; then
  cp "${PREFIX}/${PULSE_SCHEDULER_CONFFILE_FILENAME}" "${INSTALL_PATH}/etc/"
fi

# Create log folder to hold agent logs
if [[ ! -d "${INSTALL_PATH}/var/log/" ]]; then
  mkdir "${INSTALL_PATH}/var/log"
fi
# Create packages folder to hold packages to be deployed on client
if [[ ! -d "${INSTALL_PATH}/var/tmp/packages/" ]]; then
  mkdir -p "${INSTALL_PATH}/var/tmp/packages"
fi

# Copy service descriptor
cp "${PREFIX}/net.siveo.pulse_xmpp_agent.plist" /Library/LaunchDaemons/
chown root:wheel /Library/LaunchDaemons/net.siveo.pulse_xmpp_agent.plist
chmod 644 /Library/LaunchDaemons/net.siveo.pulse_xmpp_agent.plist

# Load the service
echo 'Loading Pulse Agent Service'
launchctl load net.siveo.pulse_xmpp_agent.plist
echo 'Starting Pulse Agent Service'
launchctl start net.siveo.pulse_xmpp_agent


### Enable VNC server
echo
echo "####################"
echo "7. Enable VNC server"
echo "####################"
echo

/System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -activate -configure -access -on -clientopts -setvnclegacy -vnclegacy yes -clientopts -setvncpw -vncpw ${VNC_PASSWORD} -restart -agent -privs -all
